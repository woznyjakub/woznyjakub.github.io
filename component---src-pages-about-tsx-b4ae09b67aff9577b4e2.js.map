{"version":3,"sources":["webpack:///./src/_pages/about/about.style.tsx","webpack:///./src/_pages/about/about.tsx","webpack:///./src/pages/about.tsx"],"names":["Grid","styled","div","media","phone","Column","TextWrapper","article","StyckyContainer","ImageWrapper","figure","desktopSmall","replaceDatePlaceholder","date","currentTimeString","AboutPage","data","content","dataJson","Date","toISOString","replace","workingExperienceTime","dataArray","reduce","acc","startDate","endDate","value","map","getTime","startTime","getWorkingExperienceTime","jobs","workingExperience","parseTimeToUnitsObject","title","pageTitle","isReturnButton","as","fontSize","gutter","centered","companyName","location","parsedEndDate","font","Font","SECONDARY","PRIMARY","dateTime","label","parseTimeToString","fluid","file","childImageSharp","alt","query"],"mappings":"65BAIO,IAAMA,EAAOC,IAAOC,IAAV,uEAAGD,CAAH,mBAEbE,IAAMC,MAFO,MAQJC,EAASJ,IAAOC,IAAV,yEAAGD,CAAH,4BAEfE,IAAMC,MAFS,MAQNE,EAAcL,IAAOM,QAAV,8EAAGN,CAAH,iDAMXO,EAAkBP,IAAOC,IAAV,kFAAGD,CAAH,6BAKfQ,EAAeR,IAAOS,OAAV,+EAAGT,CAAH,wSAsBrBE,IAAMC,MAtBe,KAyBrBD,IAAMQ,aAzBe,MCjBnBC,EAAyB,SAACC,EAAuCC,GACrE,MAAgB,YAATD,EAAqBC,EAAoBD,GA+FnCE,EAlFuB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAC/BC,EAAYD,EAAKE,SAAjBD,QAEFH,GAAoB,IAAIK,MAAOC,cAAcC,QAAQ,MAAO,IAE5DC,EAfyB,SAACC,EAAkBT,GAClD,OAAOS,EAAUC,QAAO,SAACC,EAAD,GAAsC,IAA9BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,QAAmB,EAC/B,CAACD,EAAUE,MAAOD,EAAQC,OAAOC,KAAI,SAAChB,GACjE,OAAO,IAAIM,KAAKP,EAAuBC,EAAMC,IAAoBgB,aAD5DC,EADqD,KAK5D,OAAON,GALqD,KAIlBM,KAEzC,GAQmCC,CAAyBf,EAAQgB,KAAMnB,GACvEoB,EAAkCC,YAAuBb,GAE/D,OACE,cAAC,IAAD,CAAac,MAAOnB,EAAQoB,UAAWC,gBAAc,EAArD,SACE,+BACE,kCACE,eAACtC,EAAD,WACE,cAACK,EAAD,UACE,eAACC,EAAD,WACE,cAAC,IAAD,CAASiC,GAAG,KAAKC,SAAS,QAAQC,OAAO,SAASC,UAAQ,EAA1D,SACGzB,EAAQoB,YAEX,cAAC,IAAD,CAAWE,GAAG,IAAIC,SAAS,SAA3B,uCAGA,cAAC,IAAD,CAAWD,GAAG,IAAd,wGACA,cAAC,IAAD,CAAWA,GAAG,IAAd,yLAIA,cAAC,IAAD,CAAWA,GAAG,IAAIE,OAAO,SAAzB,gGAGA,cAAC,IAAD,CAASF,GAAG,KAAKE,OAAO,SAASC,UAAQ,EAAzC,wBAGA,6BACGzB,EAAQgB,KAAKJ,KAAI,YAAmD,IAAhDc,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,SAAUlB,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAE/CkB,EAAgBjC,EAAuBe,EAAQC,MAAOd,GAC5D,OACE,6BACE,eAAC,IAAD,CAAWyB,GAAG,IAAIE,OAAO,SAASK,KAAMC,IAAKC,UAA7C,UACML,EADN,IAEE,eAAC,IAAD,CAAWJ,GAAG,QAAQC,SAAS,UAAUC,OAAQ,KAAMK,KAAMC,IAAKE,QAAlE,cACIL,EADJ,OAGA,uBACA,cAAC,IAAD,CAAWM,SAAUxB,EAAUE,MAAOQ,MAAOV,EAAUE,MAAOkB,KAAMC,IAAKE,QAAzE,SACGvB,EAAUyB,QAEZ,MACD,cAAC,IAAD,CAAWD,SAAUL,EAAeT,MAAOS,EAAeC,KAAMC,IAAKE,QAArE,SACGtB,EAAQwB,YAZHR,EAAZ,IAA2BjB,QAmBjC,eAAC,IAAD,CAAWe,OAAO,SAASD,SAAS,SAASM,KAAMC,IAAKC,UAAxD,kBACQI,YAAkBlB,MAE1B,cAAC,IAAD,CAASK,GAAG,KAAKE,OAAO,SAASC,UAAQ,EAAzC,6BAGA,cAAC,IAAD,CAAWH,GAAG,IAAd,wLAMJ,cAAClC,EAAD,UACE,cAACG,EAAD,UACE,cAACC,EAAD,UACE,cAAC,IAAD,CAAK4C,MAAOrC,EAAKsC,KAAKC,gBAAgBF,MAAOG,IAAI,6CC/FtDC,EAAQ","file":"component---src-pages-about-tsx-b4ae09b67aff9577b4e2.js","sourcesContent":["import styled from 'styled-components';\n\nimport { media } from '../../utils';\n\nexport const Grid = styled.div`\n  width: 100%;\n  ${media.phone`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n  `}\n`;\n\nexport const Column = styled.div`\n  padding-bottom: 2rem;\n  ${media.phone`\n    padding-left: 1rem;\n    padding-right: 1rem;\n  `}\n`;\n\nexport const TextWrapper = styled.article`\n  max-width: 350px;\n  margin: 0 auto;\n  hyphens: auto;\n`;\n\nexport const StyckyContainer = styled.div`\n  position: sticky;\n  top: 8%;\n`;\n\nexport const ImageWrapper = styled.figure`\n  position: relative;\n  max-width: 640px;\n  margin: 0 auto;\n  padding: 0 0 2rem 2rem;\n  ::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 2rem;\n    top: 2rem;\n    bottom: 0;\n    border: 1px solid currentColor;\n    z-index: -1;\n    will-change: transform;\n    transition: transform 0.3s;\n  }\n  :hover {\n    ::before {\n      transform: translate(1rem, -1rem);\n    }\n  }\n  ${media.phone`\n    margin-right: 0;\n  `}\n  ${media.desktopSmall`\n    margin-right: auto;\n    padding: 0 0 3rem 3rem;\n    ::before {\n      right: 3rem;\n      top: 3rem;\n    }\n    :hover {\n      ::before {\n        transform: translate(1.5rem, -1.5rem);\n      }\n    }\n  `}\n`;\n","import { FC } from 'react';\nimport Img from 'gatsby-image';\n\nimport { BasicLayout } from '../../components/layouts';\nimport { BasicText, Heading } from '../../components/typography';\nimport { parseTimeToUnitsObject, parseTimeToString, Font } from '../../utils';\nimport { TimeDuration } from '../../models/misc';\n\nimport { Grid, Column, TextWrapper, StyckyContainer, ImageWrapper } from './about.style';\nimport { AboutPageProps, Job, CurrentDatePlaceholder } from './about.model';\n/**\n * replaces date value when it is `current` string, then replace it with real current date value\n * @param date timestamp\n */\nconst replaceDatePlaceholder = (date: string | CurrentDatePlaceholder, currentTimeString: string): string => {\n  return date === 'current' ? currentTimeString : date;\n};\n\nconst getWorkingExperienceTime = (dataArray: Job[], currentTimeString: string): number => {\n  return dataArray.reduce((acc, { startDate, endDate }: Job) => {\n    const [startTime, endTime] = [startDate.value, endDate.value].map((date: string) => {\n      return new Date(replaceDatePlaceholder(date, currentTimeString)).getTime();\n    });\n    const singleJobExperienceTime = endTime - startTime;\n    return acc + singleJobExperienceTime;\n  }, 0);\n};\n\nconst AboutPage: FC<AboutPageProps> = ({ data }) => {\n  const { content } = data.dataJson;\n  // get current date in format YYYY-MM-DD and cut smaller than a day values\n  const currentTimeString = new Date().toISOString().replace(/T.*/, '');\n\n  const workingExperienceTime: number = getWorkingExperienceTime(content.jobs, currentTimeString);\n  const workingExperience: TimeDuration = parseTimeToUnitsObject(workingExperienceTime);\n\n  return (\n    <BasicLayout title={content.pageTitle} isReturnButton>\n      <main>\n        <section>\n          <Grid>\n            <Column>\n              <TextWrapper>\n                <Heading as=\"h1\" fontSize=\"large\" gutter=\"bottom\" centered>\n                  {content.pageTitle}\n                </Heading>\n                <BasicText as=\"p\" fontSize=\"larger\">\n                  Hi, nice to see you here!\n                </BasicText>\n                <BasicText as=\"p\">My name is Jakub Wo≈∫ny and I'm glad to be programmer specialized in front-end development.</BasicText>\n                <BasicText as=\"p\">\n                  I can develop fully working F-E layer of websites and web applications keeping the lastest standards, design patterns, good pracises and\n                  paying large attention on details.\n                </BasicText>\n                <BasicText as=\"p\" gutter=\"bottom\">\n                  My front-end adveture began in May 2018 and I perpetually keep my skill improving.\n                </BasicText>\n                <Heading as=\"h2\" gutter=\"bottom\" centered>\n                  Experience\n                </Heading>\n                <ul>\n                  {content.jobs.map(({ companyName, location, startDate, endDate }) => {\n                    // endDate may be `current` string placeholder\n                    const parsedEndDate = replaceDatePlaceholder(endDate.value, currentTimeString);\n                    return (\n                      <li key={`${companyName}_${startDate}`}>\n                        <BasicText as=\"p\" gutter=\"bottom\" font={Font.SECONDARY}>\n                          {`${companyName} `}\n                          <BasicText as=\"small\" fontSize=\"smaller\" gutter={null} font={Font.PRIMARY}>\n                            ({location})\n                          </BasicText>\n                          <br />\n                          <BasicText dateTime={startDate.value} title={startDate.value} font={Font.PRIMARY}>\n                            {startDate.label}\n                          </BasicText>\n                          {' - '}\n                          <BasicText dateTime={parsedEndDate} title={parsedEndDate} font={Font.PRIMARY}>\n                            {endDate.label}\n                          </BasicText>\n                        </BasicText>\n                      </li>\n                    );\n                  })}\n                </ul>\n                <BasicText gutter=\"bottom\" fontSize=\"larger\" font={Font.SECONDARY}>\n                  It's {parseTimeToString(workingExperience)}\n                </BasicText>\n                <Heading as=\"h2\" gutter=\"bottom\" centered>\n                  Beyond the work\n                </Heading>\n                <BasicText as=\"p\">\n                  I'm motorcycles enthusiast so I like spending time a on ride, furthermore, watching some vlogs about traveling and reading about curiosities\n                  from all over the world.\n                </BasicText>\n              </TextWrapper>\n            </Column>\n            <Column>\n              <StyckyContainer>\n                <ImageWrapper>\n                  <Img fluid={data.file.childImageSharp.fluid} alt=\"a programmer's workplace\" />\n                </ImageWrapper>\n              </StyckyContainer>\n            </Column>\n          </Grid>\n        </section>\n      </main>\n    </BasicLayout>\n  );\n};\n\nexport default AboutPage;\n","import { graphql } from 'gatsby';\n\nexport { default } from '../_pages/about';\n\nexport const query = graphql`\n  {\n    file(name: { in: \"office-1\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_tracedSVG\n          originalName\n        }\n      }\n    }\n    dataJson(dataType: { eq: \"pagedata\" }, pageName: { eq: \"about\" }) {\n      content {\n        pageTitle\n        jobs {\n          companyName\n          location\n          startDate {\n            label\n            value\n          }\n          endDate {\n            label\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\n// {\n//   dataJson(pageName: {eq: \"about\"}) {\n//     pageName\n//     content {\n//       jobs {\n//         companyName\n//         location\n//         startDate {\n//           label\n//           value\n//         }\n//         endDate {\n//           label\n//           value\n//         }\n//       }\n//     }\n//   }\n// }\n"],"sourceRoot":""}