{"version":3,"sources":["webpack:///./src/_pages/works/works.style.tsx","webpack:///./src/_pages/works/works.tsx","webpack:///./src/pages/works.tsx"],"names":["Grid","styled","ul","media","phone","desktopSmall","Card","li","TextWrapper","article","WorksPage","data","content","dataJson","title","pageTitle","isReturnButton","as","fontSize","gutter","centered","className","cards","length","map","description","imageName","links","technologies","releaseDate","fluid","allFile","edges","find","item","node","childImageSharp","originalName","alt","technologyText","releaseDateText","style","marginTop","i","array","label","url","href","target","rel","font","Font","SECONDARY","moveUnderlineOnHover","cardsAltText","query"],"mappings":"seAIO,IAAMA,EAAOC,IAAOC,GAAV,mEAAGD,CAAH,oFAMbE,IAAMC,MANO,KASbD,IAAME,aATO,MAcJC,EAAOL,IAAOM,GAAV,mEAAGN,CAAH,+CAKJO,EAAcP,IAAOQ,QAAV,0EAAGR,CAAH,oFC2DTS,EAxEuB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAC/BC,EAAYD,EAAKE,SAAjBD,QACR,OACE,eAAC,IAAD,CAAaE,MAAOF,EAAQG,UAAWC,gBAAc,EAArD,UACE,iCACE,cAAC,IAAD,CAASC,GAAG,KAAKC,SAAS,QAAQC,OAAO,SAASC,UAAQ,EAA1D,SACGR,EAAQG,cAGb,sBAAMM,UAAU,iBAAhB,SACE,yBAASA,UAAU,UAAnB,SACGT,EAAQU,MAAMC,OACb,cAACvB,EAAD,UACGY,EAAQU,MAAME,KAAI,gBAAGV,EAAH,EAAGA,MAAOW,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,aAAcC,EAAvD,EAAuDA,YAAvD,OACjB,eAACvB,EAAD,CAAMe,UAAU,4BAAhB,UACGK,GACC,iCACE,cAAC,IAAD,CACEL,UAAU,uCACVS,MAGEnB,EAAKoB,QAAQC,MAAMC,MAAK,SAACC,GACvB,OAAOA,EAAKC,KAAKC,gBAAgBN,MAAMO,eAAiBX,KACvDS,KAAKC,gBAAgBN,MAE1BQ,KAAQxB,GAAS,IAAd,0BAIT,eAACN,EAAD,WACGM,GAAS,cAAC,IAAD,CAASK,OAAO,SAAhB,SAA0BL,IACnCW,GACC,eAAC,IAAD,CAAWR,GAAG,IAAIC,SAAS,UAA3B,UACE,cAAC,IAAD,UAAYO,IACZ,eAAC,IAAD,WACMb,EAAQ2B,eADd,IACgCX,EAC9B,uBACIhB,EAAQ4B,gBAHd,IAGiCX,QAIrC,qBAAKY,MAAO,CAAEC,UAAW,QAAzB,UACIf,GAAS,IAAIH,KAAI,WAAiBmB,EAAGC,GAApB,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,OACjB,cAAC,IAAD,CACE7B,GAAG,IACHI,UAAU,YACV0B,KAAMD,GAAO,KAEbE,OAAO,SACPC,IAAI,sBACJ9B,OAAQwB,EAAIC,EAAMrB,OAAS,EAAI,QAAU,KACzC2B,KAAMC,IAAKC,UACXC,sBAAoB,EATtB,SAWGR,GAPIA,aAlCkC/B,QAkDrD,cAAC,IAAD,CAASO,UAAU,SAAnB,SAA6BT,EAAQ0C,uBCtEpCC,EAAQ","file":"component---src-pages-works-tsx-76b3e9ba34300c38ce88.js","sourcesContent":["import styled from 'styled-components';\n\nimport { media } from '../../utils';\n\nexport const Grid = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  margin-bottom: auto;\n\n  ${media.phone`\n    padding: 0 4rem;\n  `}\n  ${media.desktopSmall`\n    grid-template-columns: repeat(2, 1fr);\n  `}\n`;\n\nexport const Card = styled.li`\n  display: grid;\n  grid-template-rows: auto 1fr;\n`;\n\nexport const TextWrapper = styled.article`\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n","import { FC } from 'react';\nimport Img from 'gatsby-image';\n\nimport { BasicLayout } from '../../components/layouts';\nimport { BasicText, Heading } from '../../components/typography';\nimport { Font } from '../../utils';\n\nimport { WorkImage, WorksPageProps } from './works.model';\nimport { Grid, Card, TextWrapper } from './works.style';\n\nconst WorksPage: FC<WorksPageProps> = ({ data }) => {\n  const { content } = data.dataJson;\n  return (\n    <BasicLayout title={content.pageTitle} isReturnButton>\n      <header>\n        <Heading as=\"h1\" fontSize=\"large\" gutter=\"bottom\" centered>\n          {content.pageTitle}\n        </Heading>\n      </header>\n      <main className=\"stretch m-auto\">\n        <section className=\"stretch\">\n          {content.cards.length ? (\n            <Grid>\n              {content.cards.map(({ title, description, imageName, links, technologies, releaseDate }) => (\n                <Card className=\"saturate-on-hover-trigger\" key={title}>\n                  {imageName && (\n                    <figure>\n                      <Img\n                        className=\"img-stretched saturate-on-hover-item\"\n                        fluid={\n                          // this chain filters image data from graphql by checking\n                          // its name and returns its `fluid` object\n                          data.allFile.edges.find((item: WorkImage) => {\n                            return item.node.childImageSharp.fluid.originalName === imageName;\n                          }).node.childImageSharp.fluid\n                        }\n                        alt={`${title || ''} example screenshot`}\n                      />\n                    </figure>\n                  )}\n                  <TextWrapper>\n                    {title && <Heading gutter=\"bottom\">{title}</Heading>}\n                    {description && (\n                      <BasicText as=\"p\" fontSize=\"smaller\">\n                        <BasicText>{description}</BasicText>\n                        <BasicText>\n                          {`${content.technologyText} ${technologies}`}\n                          <br />\n                          {`${content.releaseDateText} ${releaseDate}`}\n                        </BasicText>\n                      </BasicText>\n                    )}\n                    <div style={{ marginTop: 'auto' }}>\n                      {(links || []).map(({ label, url }, i, array) => (\n                        <BasicText\n                          as=\"a\"\n                          className=\"underline\"\n                          href={url || null}\n                          key={label}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          gutter={i < array.length - 1 ? 'right' : null}\n                          font={Font.SECONDARY}\n                          moveUnderlineOnHover\n                        >\n                          {label}\n                        </BasicText>\n                      ))}\n                    </div>\n                  </TextWrapper>\n                </Card>\n              ))}\n            </Grid>\n          ) : (\n            <Heading className=\"m-auto\">{content.cardsAltText}</Heading>\n          )}\n        </section>\n      </main>\n    </BasicLayout>\n  );\n};\n\nexport default WorksPage;\n","import { graphql } from 'gatsby';\n\nexport { default } from '../_pages/works';\n\nexport const query = graphql`\n  {\n    allFile(filter: { relativeDirectory: { eq: \"works\" } }) {\n      edges {\n        node {\n          childImageSharp {\n            fluid {\n              ...GatsbyImageSharpFluid_tracedSVG\n              originalName\n            }\n          }\n        }\n      }\n    }\n    dataJson(dataType: { eq: \"pagedata\" }, pageName: { eq: \"works\" }) {\n      content {\n        pageTitle\n        releaseDateText\n        technologyText\n        cards {\n          title\n          description\n          technologies\n          releaseDate\n          imageName\n          links {\n            label\n            url\n          }\n        }\n        cardsAltText\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}