{"version":3,"sources":["webpack:///./src/_pages/works/works.style.tsx","webpack:///./src/_pages/works/WorkCard.tsx","webpack:///./src/_pages/works/ProjectsSection.tsx","webpack:///./src/_pages/works/works.tsx","webpack:///./src/pages/works.tsx","webpack:///./src/containers/pages/basic-page/BasicPage.tsx","webpack:///./src/containers/pages/error-page/ErrorPage.style.tsx","webpack:///./src/containers/pages/error-page/ErrorPage.tsx"],"names":["Grid","styled","ul","media","phone","desktopSmall","Card","li","CardTextWrapper","article","SectionTextWrapper","div","tablet","WorkCard","fluid","title","description","imageName","links","technologies","releaseDate","technologyText","releaseDateText","className","alt","gutter","as","fontSize","style","marginTop","map","i","array","label","url","disabled","href","target","rel","length","font","Font","SECONDARY","moveUnderlineOnHover","ProjectsSection","data","type","content","dataJson","projects","Section","centered","cards","card","findImage","cardsAltText","allFile","edges","find","item","node","childImageSharp","originalName","WorksPage","pageTitle","query","BasicPage","children","isReturnButton","pageTitleGutter","StyledSection","section","HeadingWrapper","ErrorPage","errorCode","errorMessage"],"mappings":"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","file":"component---src-pages-works-tsx-db40735d1a26dba2dd0f.js","sourcesContent":["import styled from 'styled-components';\n\nimport { media } from '../../utils';\n\nexport const Grid = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 2rem;\n  margin-bottom: auto;\n\n  ${media.phone`\n    padding: 0 4rem;\n  `}\n  ${media.desktopSmall`\n    grid-template-columns: repeat(2, 1fr);\n  `}\n`;\n\nexport const Card = styled.li`\n  display: grid;\n  grid-template-rows: auto 1fr;\n`;\n\nexport const CardTextWrapper = styled.article`\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const SectionTextWrapper = styled.div`\n  text-align: center;\n  ${media.phone`\n    padding: 0 4rem;\n  `}\n  ${media.tablet`\n    padding-bottom: 1rem;\n  `}\n`;\n","import Img, { FluidObject } from 'gatsby-image';\nimport { BasicText, Heading } from '../../components/typography';\nimport { Font } from '../../utils';\nimport { WorkCardData } from './works.interface';\nimport { Card, CardTextWrapper } from './works.style';\n\ntype WorkCardProps = WorkCardData & {\n  fluid: FluidObject;\n  technologyText: string;\n  releaseDateText: string;\n};\n\nexport const WorkCard = ({\n  fluid,\n  title,\n  description,\n  imageName,\n  links,\n  technologies,\n  releaseDate,\n  technologyText,\n  releaseDateText,\n}: WorkCardProps) => (\n  <Card key={title}>\n    {imageName && (\n      <figure>\n        <Img className=\"img-stretched\" fluid={fluid} alt={`${title || ''} example screenshot`} />\n      </figure>\n    )}\n    <CardTextWrapper>\n      {title && <Heading gutter=\"bottom\">{title}</Heading>}\n      {description && (\n        <BasicText as=\"p\" fontSize=\"smaller\">\n          <BasicText>{description}</BasicText>\n          <br />\n          <BasicText>\n            {`${technologyText} ${technologies}`}\n            <br />\n            {`${releaseDateText} ${releaseDate}`}\n          </BasicText>\n        </BasicText>\n      )}\n      <div style={{ marginTop: 'auto' }}>\n        {links?.map(\n          ({ label, url, disabled }, i, array) =>\n            // This old gatsby version doesn't allow empty arrays in static data json files (build crushes)\n            !disabled && (\n              <BasicText\n                as=\"a\"\n                className=\"underline\"\n                href={url || null}\n                key={label}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                gutter={i < array.length - 1 ? 'right' : null}\n                font={Font.SECONDARY}\n                moveUnderlineOnHover\n              >\n                {label}\n              </BasicText>\n            ),\n        )}\n      </div>\n    </CardTextWrapper>\n  </Card>\n);\n","import { BasicPage } from '../../containers/pages';\nimport { BasicText, Heading } from '../../components/typography';\nimport { WorkCardData, WorkImage, WorksPageData } from './works.interface';\nimport { Grid, SectionTextWrapper } from './works.style';\nimport { WorkCard } from './WorkCard';\nimport { FluidObject } from 'gatsby-image';\n\ntype ProjectsSectionProps = {\n  data: WorksPageData;\n  type: keyof WorksPageData['dataJson']['content']['projects'];\n};\n\nexport const ProjectsSection = ({ data, type }: ProjectsSectionProps) => {\n  const { content } = data.dataJson;\n  const projects = content.projects[type];\n\n  return (\n    <BasicPage.Section>\n      <SectionTextWrapper className=\"text-container\">\n        <Heading as=\"h2\" gutter=\"bottom\" centered>\n          {projects.title}\n        </Heading>\n        {projects.description && (\n          <BasicText as=\"p\" gutter=\"bottom\">\n            {projects.description}\n          </BasicText>\n        )}\n      </SectionTextWrapper>\n      {projects.cards.length ? (\n        <Grid>\n          {projects.cards.map((card: WorkCardData) => (\n            <WorkCard\n              fluid={findImage(data, card.imageName)}\n              {...card}\n              technologyText={content.technologyText}\n              releaseDateText={content.releaseDateText}\n            />\n          ))}\n        </Grid>\n      ) : (\n        <Heading className=\"m-auto\">{content.cardsAltText}</Heading>\n      )}\n    </BasicPage.Section>\n  );\n};\n\nconst findImage = (data: WorksPageData, imageName: string): FluidObject =>\n  data.allFile.edges.find((item: WorkImage) => {\n    return item.node.childImageSharp.fluid.originalName === imageName;\n  })?.node.childImageSharp.fluid;\n","import { BasicPage } from '../../containers/pages';\n\nimport { WorksPageData } from './works.interface';\nimport { ProjectsSection } from './ProjectsSection';\n\ntype WorkPageProps = {\n  data: WorksPageData;\n};\n\nconst WorksPage = ({ data }: WorkPageProps) => {\n  const { content } = data.dataJson;\n\n  return (\n    <BasicPage title={content.pageTitle}>\n      <ProjectsSection data={data} type=\"active\" />\n\n      <ProjectsSection data={data} type=\"archived\" />\n    </BasicPage>\n  );\n};\n\nexport default WorksPage;\n","import { graphql } from 'gatsby';\n\nexport { default } from '../_pages/works';\n\nexport const query = graphql`\n  {\n    allFile(filter: { relativeDirectory: { eq: \"works\" } }) {\n      edges {\n        node {\n          childImageSharp {\n            fluid {\n              ...GatsbyImageSharpFluid_tracedSVG\n              originalName\n            }\n          }\n        }\n      }\n    }\n    dataJson(dataType: { eq: \"pagedata\" }, pageName: { eq: \"works\" }) {\n      content {\n        pageTitle\n        releaseDateText\n        technologyText\n        cardsAltText\n        projects {\n          active {\n            title\n            description\n            cards {\n              title\n              description\n              technologies\n              releaseDate\n              imageName\n              links {\n                label\n                url\n                disabled\n              }\n            }\n          }\n          archived {\n            title\n            description\n            cards {\n              title\n              description\n              technologies\n              releaseDate\n              imageName\n              links {\n                label\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { FC } from 'react';\n\nimport { Heading } from '../../../components/typography';\nimport { BasicLayout } from '../../../components/layouts';\nimport styled from 'styled-components';\n\ntype BasicPageCmpProps = {\n  title: string;\n};\n\ntype NestedComponents = {\n  Section: FC;\n};\n\nconst BasicPage: FC<BasicPageCmpProps> & NestedComponents = ({ children, title }) => {\n  return (\n    <BasicLayout title={title} isReturnButton>\n      <header>\n        <Heading as=\"h1\" fontSize=\"large\" pageTitleGutter centered>\n          {title}\n        </Heading>\n      </header>\n      <main className=\"stretch h-100\">{children}</main>\n    </BasicLayout>\n  );\n};\n\nconst StyledSection = styled.section`\n  margin: auto;\n  width: 100%;\n\n  :not(:last-child) {\n    margin-bottom: 1.5rem;\n  }\n`;\n\nconst BasicPageSection = ({ children }) => {\n  return <StyledSection>{children}</StyledSection>;\n};\n\nBasicPage.Section = BasicPageSection;\n\nexport { BasicPage };\n","import styled from 'styled-components';\n\nexport const HeadingWrapper = styled.div`\n  max-width: 400px;\n`;\n","import { BasicLayout } from '../../../components/layouts';\nimport { FeaturedErrorNumber } from '../../../components/typography';\nimport { ErrorPageWrapper } from '../../../components/wrappers';\nimport { Heading } from '../../../components/typography';\n\nimport { HeadingWrapper } from './ErrorPage.style';\n\ntype ErrorCmpProps = {\n  title: string;\n  errorCode: string;\n  errorMessage: string;\n};\n\nexport const ErrorPage = ({ title, errorCode, errorMessage }: ErrorCmpProps) => {\n  return (\n    <BasicLayout title={title} isReturnButton>\n      <ErrorPageWrapper>\n        <main>\n          <section>\n            <FeaturedErrorNumber as=\"h1\">{errorCode}</FeaturedErrorNumber>\n            <HeadingWrapper>\n              <Heading as=\"p\">{errorMessage}</Heading>\n            </HeadingWrapper>\n          </section>\n        </main>\n      </ErrorPageWrapper>\n    </BasicLayout>\n  );\n};\n"],"sourceRoot":""}